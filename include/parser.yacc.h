// A Bison parser, made by GNU Bison 3.7.

// Skeleton interface for Bison LALR(1) parsers in C++

// Copyright (C) 2002-2015, 2018-2020 Free Software Foundation, Inc.

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// As a special exception, you may create a larger work that contains
// part or all of the Bison parser skeleton and distribute that work
// under terms of your choice, so long as that work isn't itself a
// parser generator using the skeleton or a modified version thereof
// as a parser skeleton.  Alternatively, if you modify or redistribute
// the parser skeleton itself, you may (at your option) remove this
// special exception, which will cause the skeleton and the resulting
// Bison output files to be licensed under the GNU General Public
// License without this special exception.

// This special exception was added by the Free Software Foundation in
// version 2.2 of Bison.


/**
 ** \file ./include/parser.yacc.h
 ** Define the yy::parser class.
 */

// C++ LALR(1) parser skeleton written by Akim Demaille.

// DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
// especially those whose name start with YY_ or yy_.  They are
// private implementation details that can be changed or removed.

#ifndef YY_YY_INCLUDE_PARSER_YACC_H_INCLUDED
# define YY_YY_INCLUDE_PARSER_YACC_H_INCLUDED
// "%code requires" blocks.
#line 28 "./src/parser.ypp"

	#include <ast/ast.h>
	
  namespace yy {
    class Lexer;  // Generated by reflex with namespace=yy lexer=Lexer lex=yylex
  }

#line 57 "./include/parser.yacc.h"


# include <cstdlib> // std::abort
# include <iostream>
# include <stdexcept>
# include <string>
# include <vector>

#if defined __cplusplus
# define YY_CPLUSPLUS __cplusplus
#else
# define YY_CPLUSPLUS 199711L
#endif

// Support move semantics when possible.
#if 201103L <= YY_CPLUSPLUS
# define YY_MOVE           std::move
# define YY_MOVE_OR_COPY   move
# define YY_MOVE_REF(Type) Type&&
# define YY_RVREF(Type)    Type&&
# define YY_COPY(Type)     Type
#else
# define YY_MOVE
# define YY_MOVE_OR_COPY   copy
# define YY_MOVE_REF(Type) Type&
# define YY_RVREF(Type)    const Type&
# define YY_COPY(Type)     const Type&
#endif

// Support noexcept when possible.
#if 201103L <= YY_CPLUSPLUS
# define YY_NOEXCEPT noexcept
# define YY_NOTHROW
#else
# define YY_NOEXCEPT
# define YY_NOTHROW throw ()
#endif

// Support constexpr when possible.
#if 201703 <= YY_CPLUSPLUS
# define YY_CONSTEXPR constexpr
#else
# define YY_CONSTEXPR
#endif


#ifndef YY_ASSERT
# include <cassert>
# define YY_ASSERT assert
#endif


#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && ! defined __ICC && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                            \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

#line 11 "./src/parser.ypp"
namespace yy {
#line 192 "./include/parser.yacc.h"




  /// A Bison parser.
  class parser
  {
  public:
#ifndef YYSTYPE
  /// A buffer to store and retrieve objects.
  ///
  /// Sort of a variant, but does not keep track of the nature
  /// of the stored data, since that knowledge is available
  /// via the current parser state.
  class semantic_type
  {
  public:
    /// Type of *this.
    typedef semantic_type self_type;

    /// Empty construction.
    semantic_type () YY_NOEXCEPT
      : yybuffer_ ()
    {}

    /// Construct and fill.
    template <typename T>
    semantic_type (YY_RVREF (T) t)
    {
      YY_ASSERT (sizeof (T) <= size);
      new (yyas_<T> ()) T (YY_MOVE (t));
    }

#if 201103L <= YY_CPLUSPLUS
    /// Non copyable.
    semantic_type (const self_type&) = delete;
    /// Non copyable.
    self_type& operator= (const self_type&) = delete;
#endif

    /// Destruction, allowed only if empty.
    ~semantic_type () YY_NOEXCEPT
    {}

# if 201103L <= YY_CPLUSPLUS
    /// Instantiate a \a T in here from \a t.
    template <typename T, typename... U>
    T&
    emplace (U&&... u)
    {
      return *new (yyas_<T> ()) T (std::forward <U>(u)...);
    }
# else
    /// Instantiate an empty \a T in here.
    template <typename T>
    T&
    emplace ()
    {
      return *new (yyas_<T> ()) T ();
    }

    /// Instantiate a \a T in here from \a t.
    template <typename T>
    T&
    emplace (const T& t)
    {
      return *new (yyas_<T> ()) T (t);
    }
# endif

    /// Instantiate an empty \a T in here.
    /// Obsolete, use emplace.
    template <typename T>
    T&
    build ()
    {
      return emplace<T> ();
    }

    /// Instantiate a \a T in here from \a t.
    /// Obsolete, use emplace.
    template <typename T>
    T&
    build (const T& t)
    {
      return emplace<T> (t);
    }

    /// Accessor to a built \a T.
    template <typename T>
    T&
    as () YY_NOEXCEPT
    {
      return *yyas_<T> ();
    }

    /// Const accessor to a built \a T (for %printer).
    template <typename T>
    const T&
    as () const YY_NOEXCEPT
    {
      return *yyas_<T> ();
    }

    /// Swap the content with \a that, of same type.
    ///
    /// Both variants must be built beforehand, because swapping the actual
    /// data requires reading it (with as()), and this is not possible on
    /// unconstructed variants: it would require some dynamic testing, which
    /// should not be the variant's responsibility.
    /// Swapping between built and (possibly) non-built is done with
    /// self_type::move ().
    template <typename T>
    void
    swap (self_type& that) YY_NOEXCEPT
    {
      std::swap (as<T> (), that.as<T> ());
    }

    /// Move the content of \a that to this.
    ///
    /// Destroys \a that.
    template <typename T>
    void
    move (self_type& that)
    {
# if 201103L <= YY_CPLUSPLUS
      emplace<T> (std::move (that.as<T> ()));
# else
      emplace<T> ();
      swap<T> (that);
# endif
      that.destroy<T> ();
    }

# if 201103L <= YY_CPLUSPLUS
    /// Move the content of \a that to this.
    template <typename T>
    void
    move (self_type&& that)
    {
      emplace<T> (std::move (that.as<T> ()));
      that.destroy<T> ();
    }
#endif

    /// Copy the content of \a that to this.
    template <typename T>
    void
    copy (const self_type& that)
    {
      emplace<T> (that.as<T> ());
    }

    /// Destroy the stored \a T.
    template <typename T>
    void
    destroy ()
    {
      as<T> ().~T ();
    }

  private:
#if YY_CPLUSPLUS < 201103L
    /// Non copyable.
    semantic_type (const self_type&);
    /// Non copyable.
    self_type& operator= (const self_type&);
#endif

    /// Accessor to raw memory as \a T.
    template <typename T>
    T*
    yyas_ () YY_NOEXCEPT
    {
      void *yyp = yybuffer_.yyraw;
      return static_cast<T*> (yyp);
     }

    /// Const accessor to raw memory as \a T.
    template <typename T>
    const T*
    yyas_ () const YY_NOEXCEPT
    {
      const void *yyp = yybuffer_.yyraw;
      return static_cast<const T*> (yyp);
     }

    /// An auxiliary type to compute the largest semantic type.
    union union_type
    {
      // statement
      // expression
      // loop_statement
      char dummy1[sizeof (AstNode*)];

      // function_expression
      char dummy2[sizeof (FunctionCallNode*)];

      // function_statement
      char dummy3[sizeof (FunctionNode*)];

      // if_statement
      char dummy4[sizeof (IfNode*)];

      // list_expression
      char dummy5[sizeof (ListNode*)];

      // block
      char dummy6[sizeof (RootNode*)];

      // type_statement
      char dummy7[sizeof (Type)];

      // TRUTH
      char dummy8[sizeof (bool)];

      // FLOAT
      char dummy9[sizeof (double)];

      // INT
      char dummy10[sizeof (int)];

      // input_list
      char dummy11[sizeof (std::list<std::tuple<std::string, Type>>)];

      // STRING
      // VAR
      char dummy12[sizeof (std::string)];

      // expression_list
      char dummy13[sizeof (std::vector<AstNode*>)];
    };

    /// The size of the largest semantic type.
    enum { size = sizeof (union_type) };

    /// A buffer to store semantic values.
    union
    {
      /// Strongest alignment constraints.
      long double yyalign_me;
      /// A buffer large enough to store any of the semantic values.
      char yyraw[size];
    } yybuffer_;
  };

#else
    typedef YYSTYPE semantic_type;
#endif

    /// Syntax errors thrown from user actions.
    struct syntax_error : std::runtime_error
    {
      syntax_error (const std::string& m)
        : std::runtime_error (m)
      {}

      syntax_error (const syntax_error& s)
        : std::runtime_error (s.what ())
      {}

      ~syntax_error () YY_NOEXCEPT YY_NOTHROW;
    };

    /// Token kinds.
    struct token
    {
      enum token_kind_type
      {
        TOK_YYEMPTY = -2,
    TOK_YYEOF = 0,                 // "end of file"
    TOK_YYerror = 256,             // error
    TOK_YYUNDEF = 257,             // "invalid token"
    TOK_LAND = 258,                // LAND
    TOK_LOR = 259,                 // LOR
    TOK_LEQ = 260,                 // LEQ
    TOK_LNEQ = 261,                // LNEQ
    TOK_LTEQ = 262,                // LTEQ
    TOK_GTEQ = 263,                // GTEQ
    TOK_POW = 264,                 // POW
    TOK_RETURNS = 265,             // RETURNS
    TOK_EXIT = 266,                // EXIT
    TOK_PRINT = 267,               // PRINT
    TOK_IF = 268,                  // IF
    TOK_ELSE = 269,                // ELSE
    TOK_WHILE = 270,               // WHILE
    TOK_FOR = 271,                 // FOR
    TOK_TRUE = 272,                // TRUE
    TOK_FALSE = 273,               // FALSE
    TOK_IMPORT = 274,              // IMPORT
    TOK_IRUN = 275,                // IRUN
    TOK_ISTART = 276,              // ISTART
    TOK_IROOT = 277,               // IROOT
    TOK_TYPE_INT = 278,            // TYPE_INT
    TOK_TYPE_FLOAT = 279,          // TYPE_FLOAT
    TOK_TYPE_STRING = 280,         // TYPE_STRING
    TOK_TYPE_NONE = 281,           // TYPE_NONE
    TOK_TYPE_TRUTH = 282,          // TYPE_TRUTH
    TOK_TYPE_LIST = 283,           // TYPE_LIST
    TOK_TYPE = 284,                // TYPE
    TOK_INT = 285,                 // INT
    TOK_FLOAT = 286,               // FLOAT
    TOK_STRING = 287,              // STRING
    TOK_VAR = 288,                 // VAR
    TOK_ADDEQ = 289,               // ADDEQ
    TOK_SUBEQ = 290,               // SUBEQ
    TOK_POWEQ = 291,               // POWEQ
    TOK_MULEQ = 292,               // MULEQ
    TOK_DIVEQ = 293,               // DIVEQ
    TOK_MODEQ = 294,               // MODEQ
    TOK_BANDEQ = 295,              // BANDEQ
    TOK_BOREQ = 296,               // BOREQ
    TOK_BXOREQ = 297,              // BXOREQ
    TOK_ADDADD = 298,              // ADDADD
    TOK_SUBSUB = 299,              // SUBSUB
    TOK_NEG = 300,                 // NEG
    TOK_NOT = 301,                 // NOT
    TOK_NO_ELSE = 302              // NO_ELSE
      };
      /// Backward compatibility alias (Bison 3.6).
      typedef token_kind_type yytokentype;
    };

    /// Token kind, as returned by yylex.
    typedef token::yytokentype token_kind_type;

    /// Backward compatibility alias (Bison 3.6).
    typedef token_kind_type token_type;

    /// Symbol kinds.
    struct symbol_kind
    {
      enum symbol_kind_type
      {
        YYNTOKENS = 69, ///< Number of tokens.
        S_YYEMPTY = -2,
        S_YYEOF = 0,                             // "end of file"
        S_YYerror = 1,                           // error
        S_YYUNDEF = 2,                           // "invalid token"
        S_LAND = 3,                              // LAND
        S_LOR = 4,                               // LOR
        S_LEQ = 5,                               // LEQ
        S_LNEQ = 6,                              // LNEQ
        S_LTEQ = 7,                              // LTEQ
        S_GTEQ = 8,                              // GTEQ
        S_POW = 9,                               // POW
        S_RETURNS = 10,                          // RETURNS
        S_EXIT = 11,                             // EXIT
        S_PRINT = 12,                            // PRINT
        S_IF = 13,                               // IF
        S_ELSE = 14,                             // ELSE
        S_WHILE = 15,                            // WHILE
        S_FOR = 16,                              // FOR
        S_TRUE = 17,                             // TRUE
        S_FALSE = 18,                            // FALSE
        S_IMPORT = 19,                           // IMPORT
        S_IRUN = 20,                             // IRUN
        S_ISTART = 21,                           // ISTART
        S_IROOT = 22,                            // IROOT
        S_TYPE_INT = 23,                         // TYPE_INT
        S_TYPE_FLOAT = 24,                       // TYPE_FLOAT
        S_TYPE_STRING = 25,                      // TYPE_STRING
        S_TYPE_NONE = 26,                        // TYPE_NONE
        S_TYPE_TRUTH = 27,                       // TYPE_TRUTH
        S_TYPE_LIST = 28,                        // TYPE_LIST
        S_TYPE = 29,                             // TYPE
        S_INT = 30,                              // INT
        S_FLOAT = 31,                            // FLOAT
        S_STRING = 32,                           // STRING
        S_VAR = 33,                              // VAR
        S_34_ = 34,                              // ','
        S_35_ = 35,                              // '='
        S_36_ = 36,                              // '<'
        S_37_ = 37,                              // '>'
        S_38_ = 38,                              // '&'
        S_39_ = 39,                              // '|'
        S_40_ = 40,                              // '^'
        S_41_ = 41,                              // '+'
        S_42_ = 42,                              // '-'
        S_43_ = 43,                              // '*'
        S_44_ = 44,                              // '/'
        S_45_ = 45,                              // '%'
        S_46_ = 46,                              // '('
        S_47_ = 47,                              // ')'
        S_ADDEQ = 48,                            // ADDEQ
        S_SUBEQ = 49,                            // SUBEQ
        S_POWEQ = 50,                            // POWEQ
        S_MULEQ = 51,                            // MULEQ
        S_DIVEQ = 52,                            // DIVEQ
        S_MODEQ = 53,                            // MODEQ
        S_BANDEQ = 54,                           // BANDEQ
        S_BOREQ = 55,                            // BOREQ
        S_BXOREQ = 56,                           // BXOREQ
        S_ADDADD = 57,                           // ADDADD
        S_SUBSUB = 58,                           // SUBSUB
        S_NEG = 59,                              // NEG
        S_NOT = 60,                              // NOT
        S_61_ = 61,                              // '!'
        S_62_ = 62,                              // ':'
        S_63_ = 63,                              // ';'
        S_NO_ELSE = 64,                          // NO_ELSE
        S_65_ = 65,                              // '['
        S_66_ = 66,                              // ']'
        S_67_ = 67,                              // '{'
        S_68_ = 68,                              // '}'
        S_YYACCEPT = 69,                         // $accept
        S_run = 70,                              // run
        S_block = 71,                            // block
        S_type_statement = 72,                   // type_statement
        S_statement = 73,                        // statement
        S_TRUTH = 74,                            // TRUTH
        S_expression_list = 75,                  // expression_list
        S_list_expression = 76,                  // list_expression
        S_expression = 77,                       // expression
        S_input_list = 78,                       // input_list
        S_function_statement = 79,               // function_statement
        S_function_expression = 80,              // function_expression
        S_if_statement = 81,                     // if_statement
        S_loop_statement = 82                    // loop_statement
      };
    };

    /// (Internal) symbol kind.
    typedef symbol_kind::symbol_kind_type symbol_kind_type;

    /// The number of tokens.
    static const symbol_kind_type YYNTOKENS = symbol_kind::YYNTOKENS;

    /// A complete symbol.
    ///
    /// Expects its Base type to provide access to the symbol kind
    /// via kind ().
    ///
    /// Provide access to semantic value.
    template <typename Base>
    struct basic_symbol : Base
    {
      /// Alias to Base.
      typedef Base super_type;

      /// Default constructor.
      basic_symbol ()
        : value ()
      {}

#if 201103L <= YY_CPLUSPLUS
      /// Move constructor.
      basic_symbol (basic_symbol&& that)
        : Base (std::move (that))
        , value ()
      {
        switch (this->kind ())
    {
      case symbol_kind::S_statement: // statement
      case symbol_kind::S_expression: // expression
      case symbol_kind::S_loop_statement: // loop_statement
        value.move< AstNode* > (std::move (that.value));
        break;

      case symbol_kind::S_function_expression: // function_expression
        value.move< FunctionCallNode* > (std::move (that.value));
        break;

      case symbol_kind::S_function_statement: // function_statement
        value.move< FunctionNode* > (std::move (that.value));
        break;

      case symbol_kind::S_if_statement: // if_statement
        value.move< IfNode* > (std::move (that.value));
        break;

      case symbol_kind::S_list_expression: // list_expression
        value.move< ListNode* > (std::move (that.value));
        break;

      case symbol_kind::S_block: // block
        value.move< RootNode* > (std::move (that.value));
        break;

      case symbol_kind::S_type_statement: // type_statement
        value.move< Type > (std::move (that.value));
        break;

      case symbol_kind::S_TRUTH: // TRUTH
        value.move< bool > (std::move (that.value));
        break;

      case symbol_kind::S_FLOAT: // FLOAT
        value.move< double > (std::move (that.value));
        break;

      case symbol_kind::S_INT: // INT
        value.move< int > (std::move (that.value));
        break;

      case symbol_kind::S_input_list: // input_list
        value.move< std::list<std::tuple<std::string, Type>> > (std::move (that.value));
        break;

      case symbol_kind::S_STRING: // STRING
      case symbol_kind::S_VAR: // VAR
        value.move< std::string > (std::move (that.value));
        break;

      case symbol_kind::S_expression_list: // expression_list
        value.move< std::vector<AstNode*> > (std::move (that.value));
        break;

      default:
        break;
    }

      }
#endif

      /// Copy constructor.
      basic_symbol (const basic_symbol& that);

      /// Constructor for valueless symbols, and symbols from each type.
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t)
        : Base (t)
      {}
#else
      basic_symbol (typename Base::kind_type t)
        : Base (t)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, AstNode*&& v)
        : Base (t)
        , value (std::move (v))
      {}
#else
      basic_symbol (typename Base::kind_type t, const AstNode*& v)
        : Base (t)
        , value (v)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, FunctionCallNode*&& v)
        : Base (t)
        , value (std::move (v))
      {}
#else
      basic_symbol (typename Base::kind_type t, const FunctionCallNode*& v)
        : Base (t)
        , value (v)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, FunctionNode*&& v)
        : Base (t)
        , value (std::move (v))
      {}
#else
      basic_symbol (typename Base::kind_type t, const FunctionNode*& v)
        : Base (t)
        , value (v)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, IfNode*&& v)
        : Base (t)
        , value (std::move (v))
      {}
#else
      basic_symbol (typename Base::kind_type t, const IfNode*& v)
        : Base (t)
        , value (v)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, ListNode*&& v)
        : Base (t)
        , value (std::move (v))
      {}
#else
      basic_symbol (typename Base::kind_type t, const ListNode*& v)
        : Base (t)
        , value (v)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, RootNode*&& v)
        : Base (t)
        , value (std::move (v))
      {}
#else
      basic_symbol (typename Base::kind_type t, const RootNode*& v)
        : Base (t)
        , value (v)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, Type&& v)
        : Base (t)
        , value (std::move (v))
      {}
#else
      basic_symbol (typename Base::kind_type t, const Type& v)
        : Base (t)
        , value (v)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, bool&& v)
        : Base (t)
        , value (std::move (v))
      {}
#else
      basic_symbol (typename Base::kind_type t, const bool& v)
        : Base (t)
        , value (v)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, double&& v)
        : Base (t)
        , value (std::move (v))
      {}
#else
      basic_symbol (typename Base::kind_type t, const double& v)
        : Base (t)
        , value (v)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, int&& v)
        : Base (t)
        , value (std::move (v))
      {}
#else
      basic_symbol (typename Base::kind_type t, const int& v)
        : Base (t)
        , value (v)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, std::list<std::tuple<std::string, Type>>&& v)
        : Base (t)
        , value (std::move (v))
      {}
#else
      basic_symbol (typename Base::kind_type t, const std::list<std::tuple<std::string, Type>>& v)
        : Base (t)
        , value (v)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, std::string&& v)
        : Base (t)
        , value (std::move (v))
      {}
#else
      basic_symbol (typename Base::kind_type t, const std::string& v)
        : Base (t)
        , value (v)
      {}
#endif
#if 201103L <= YY_CPLUSPLUS
      basic_symbol (typename Base::kind_type t, std::vector<AstNode*>&& v)
        : Base (t)
        , value (std::move (v))
      {}
#else
      basic_symbol (typename Base::kind_type t, const std::vector<AstNode*>& v)
        : Base (t)
        , value (v)
      {}
#endif

      /// Destroy the symbol.
      ~basic_symbol ()
      {
        clear ();
      }

      /// Destroy contents, and record that is empty.
      void clear ()
      {
        // User destructor.
        symbol_kind_type yykind = this->kind ();
        basic_symbol<Base>& yysym = *this;
        (void) yysym;
        switch (yykind)
        {
       default:
          break;
        }

        // Value type destructor.
switch (yykind)
    {
      case symbol_kind::S_statement: // statement
      case symbol_kind::S_expression: // expression
      case symbol_kind::S_loop_statement: // loop_statement
        value.template destroy< AstNode* > ();
        break;

      case symbol_kind::S_function_expression: // function_expression
        value.template destroy< FunctionCallNode* > ();
        break;

      case symbol_kind::S_function_statement: // function_statement
        value.template destroy< FunctionNode* > ();
        break;

      case symbol_kind::S_if_statement: // if_statement
        value.template destroy< IfNode* > ();
        break;

      case symbol_kind::S_list_expression: // list_expression
        value.template destroy< ListNode* > ();
        break;

      case symbol_kind::S_block: // block
        value.template destroy< RootNode* > ();
        break;

      case symbol_kind::S_type_statement: // type_statement
        value.template destroy< Type > ();
        break;

      case symbol_kind::S_TRUTH: // TRUTH
        value.template destroy< bool > ();
        break;

      case symbol_kind::S_FLOAT: // FLOAT
        value.template destroy< double > ();
        break;

      case symbol_kind::S_INT: // INT
        value.template destroy< int > ();
        break;

      case symbol_kind::S_input_list: // input_list
        value.template destroy< std::list<std::tuple<std::string, Type>> > ();
        break;

      case symbol_kind::S_STRING: // STRING
      case symbol_kind::S_VAR: // VAR
        value.template destroy< std::string > ();
        break;

      case symbol_kind::S_expression_list: // expression_list
        value.template destroy< std::vector<AstNode*> > ();
        break;

      default:
        break;
    }

        Base::clear ();
      }

#if YYDEBUG || 0
      /// The user-facing name of this symbol.
      const char *name () const YY_NOEXCEPT
      {
        return parser::symbol_name (this->kind ());
      }
#endif // #if YYDEBUG || 0


      /// Backward compatibility (Bison 3.6).
      symbol_kind_type type_get () const YY_NOEXCEPT;

      /// Whether empty.
      bool empty () const YY_NOEXCEPT;

      /// Destructive move, \a s is emptied into this.
      void move (basic_symbol& s);

      /// The semantic value.
      semantic_type value;

    private:
#if YY_CPLUSPLUS < 201103L
      /// Assignment operator.
      basic_symbol& operator= (const basic_symbol& that);
#endif
    };

    /// Type access provider for token (enum) based symbols.
    struct by_kind
    {
      /// Default constructor.
      by_kind ();

#if 201103L <= YY_CPLUSPLUS
      /// Move constructor.
      by_kind (by_kind&& that);
#endif

      /// Copy constructor.
      by_kind (const by_kind& that);

      /// The symbol kind as needed by the constructor.
      typedef token_kind_type kind_type;

      /// Constructor from (external) token numbers.
      by_kind (kind_type t);

      /// Record that this symbol is empty.
      void clear ();

      /// Steal the symbol kind from \a that.
      void move (by_kind& that);

      /// The (internal) type number (corresponding to \a type).
      /// \a empty when empty.
      symbol_kind_type kind () const YY_NOEXCEPT;

      /// Backward compatibility (Bison 3.6).
      symbol_kind_type type_get () const YY_NOEXCEPT;

      /// The symbol kind.
      /// \a S_YYEMPTY when empty.
      symbol_kind_type kind_;
    };

    /// Backward compatibility for a private implementation detail (Bison 3.6).
    typedef by_kind by_type;

    /// "External" symbols: returned by the scanner.
    struct symbol_type : basic_symbol<by_kind>
    {
      /// Superclass.
      typedef basic_symbol<by_kind> super_type;

      /// Empty symbol.
      symbol_type () {}

      /// Constructor for valueless symbols, and symbols from each type.
#if 201103L <= YY_CPLUSPLUS
      symbol_type (int tok)
        : super_type(token_type (tok))
      {
        YY_ASSERT (tok == token::TOK_YYEOF || tok == token::TOK_YYerror || tok == token::TOK_YYUNDEF || tok == token::TOK_LAND || tok == token::TOK_LOR || tok == token::TOK_LEQ || tok == token::TOK_LNEQ || tok == token::TOK_LTEQ || tok == token::TOK_GTEQ || tok == token::TOK_POW || tok == token::TOK_RETURNS || tok == token::TOK_EXIT || tok == token::TOK_PRINT || tok == token::TOK_IF || tok == token::TOK_ELSE || tok == token::TOK_WHILE || tok == token::TOK_FOR || tok == token::TOK_TRUE || tok == token::TOK_FALSE || tok == token::TOK_IMPORT || tok == token::TOK_IRUN || tok == token::TOK_ISTART || tok == token::TOK_IROOT || tok == token::TOK_TYPE_INT || tok == token::TOK_TYPE_FLOAT || tok == token::TOK_TYPE_STRING || tok == token::TOK_TYPE_NONE || tok == token::TOK_TYPE_TRUTH || tok == token::TOK_TYPE_LIST || tok == token::TOK_TYPE || tok == 44 || tok == 61 || tok == 60 || tok == 62 || tok == 38 || tok == 124 || tok == 94 || tok == 43 || tok == 45 || tok == 42 || tok == 47 || tok == 37 || tok == 40 || tok == 41 || tok == token::TOK_ADDEQ || tok == token::TOK_SUBEQ || tok == token::TOK_POWEQ || tok == token::TOK_MULEQ || tok == token::TOK_DIVEQ || tok == token::TOK_MODEQ || tok == token::TOK_BANDEQ || tok == token::TOK_BOREQ || tok == token::TOK_BXOREQ || tok == token::TOK_ADDADD || tok == token::TOK_SUBSUB || tok == token::TOK_NEG || tok == token::TOK_NOT || tok == 33 || tok == 58 || tok == 59 || tok == token::TOK_NO_ELSE || tok == 91 || tok == 93 || tok == 123 || tok == 125);
      }
#else
      symbol_type (int tok)
        : super_type(token_type (tok))
      {
        YY_ASSERT (tok == token::TOK_YYEOF || tok == token::TOK_YYerror || tok == token::TOK_YYUNDEF || tok == token::TOK_LAND || tok == token::TOK_LOR || tok == token::TOK_LEQ || tok == token::TOK_LNEQ || tok == token::TOK_LTEQ || tok == token::TOK_GTEQ || tok == token::TOK_POW || tok == token::TOK_RETURNS || tok == token::TOK_EXIT || tok == token::TOK_PRINT || tok == token::TOK_IF || tok == token::TOK_ELSE || tok == token::TOK_WHILE || tok == token::TOK_FOR || tok == token::TOK_TRUE || tok == token::TOK_FALSE || tok == token::TOK_IMPORT || tok == token::TOK_IRUN || tok == token::TOK_ISTART || tok == token::TOK_IROOT || tok == token::TOK_TYPE_INT || tok == token::TOK_TYPE_FLOAT || tok == token::TOK_TYPE_STRING || tok == token::TOK_TYPE_NONE || tok == token::TOK_TYPE_TRUTH || tok == token::TOK_TYPE_LIST || tok == token::TOK_TYPE || tok == 44 || tok == 61 || tok == 60 || tok == 62 || tok == 38 || tok == 124 || tok == 94 || tok == 43 || tok == 45 || tok == 42 || tok == 47 || tok == 37 || tok == 40 || tok == 41 || tok == token::TOK_ADDEQ || tok == token::TOK_SUBEQ || tok == token::TOK_POWEQ || tok == token::TOK_MULEQ || tok == token::TOK_DIVEQ || tok == token::TOK_MODEQ || tok == token::TOK_BANDEQ || tok == token::TOK_BOREQ || tok == token::TOK_BXOREQ || tok == token::TOK_ADDADD || tok == token::TOK_SUBSUB || tok == token::TOK_NEG || tok == token::TOK_NOT || tok == 33 || tok == 58 || tok == 59 || tok == token::TOK_NO_ELSE || tok == 91 || tok == 93 || tok == 123 || tok == 125);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      symbol_type (int tok, double v)
        : super_type(token_type (tok), std::move (v))
      {
        YY_ASSERT (tok == token::TOK_FLOAT);
      }
#else
      symbol_type (int tok, const double& v)
        : super_type(token_type (tok), v)
      {
        YY_ASSERT (tok == token::TOK_FLOAT);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      symbol_type (int tok, int v)
        : super_type(token_type (tok), std::move (v))
      {
        YY_ASSERT (tok == token::TOK_INT);
      }
#else
      symbol_type (int tok, const int& v)
        : super_type(token_type (tok), v)
      {
        YY_ASSERT (tok == token::TOK_INT);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      symbol_type (int tok, std::string v)
        : super_type(token_type (tok), std::move (v))
      {
        YY_ASSERT (tok == token::TOK_STRING || tok == token::TOK_VAR);
      }
#else
      symbol_type (int tok, const std::string& v)
        : super_type(token_type (tok), v)
      {
        YY_ASSERT (tok == token::TOK_STRING || tok == token::TOK_VAR);
      }
#endif
    };

    /// Build a parser object.
    parser (yy::Lexer &lexer_yyarg);
    virtual ~parser ();

#if 201103L <= YY_CPLUSPLUS
    /// Non copyable.
    parser (const parser&) = delete;
    /// Non copyable.
    parser& operator= (const parser&) = delete;
#endif

    /// Parse.  An alias for parse ().
    /// \returns  0 iff parsing succeeded.
    int operator() ();

    /// Parse.
    /// \returns  0 iff parsing succeeded.
    virtual int parse ();

#if YYDEBUG
    /// The current debugging stream.
    std::ostream& debug_stream () const YY_ATTRIBUTE_PURE;
    /// Set the current debugging stream.
    void set_debug_stream (std::ostream &);

    /// Type for debugging levels.
    typedef int debug_level_type;
    /// The current debugging level.
    debug_level_type debug_level () const YY_ATTRIBUTE_PURE;
    /// Set the current debugging level.
    void set_debug_level (debug_level_type l);
#endif

    /// Report a syntax error.
    /// \param msg    a description of the syntax error.
    virtual void error (const std::string& msg);

    /// Report a syntax error.
    void error (const syntax_error& err);

#if YYDEBUG || 0
    /// The user-facing name of the symbol whose (internal) number is
    /// YYSYMBOL.  No bounds checking.
    static const char *symbol_name (symbol_kind_type yysymbol);
#endif // #if YYDEBUG || 0


    // Implementation of make_symbol for each symbol type.
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_YYEOF ()
      {
        return symbol_type (token::TOK_YYEOF);
      }
#else
      static
      symbol_type
      make_YYEOF ()
      {
        return symbol_type (token::TOK_YYEOF);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_YYerror ()
      {
        return symbol_type (token::TOK_YYerror);
      }
#else
      static
      symbol_type
      make_YYerror ()
      {
        return symbol_type (token::TOK_YYerror);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_YYUNDEF ()
      {
        return symbol_type (token::TOK_YYUNDEF);
      }
#else
      static
      symbol_type
      make_YYUNDEF ()
      {
        return symbol_type (token::TOK_YYUNDEF);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_LAND ()
      {
        return symbol_type (token::TOK_LAND);
      }
#else
      static
      symbol_type
      make_LAND ()
      {
        return symbol_type (token::TOK_LAND);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_LOR ()
      {
        return symbol_type (token::TOK_LOR);
      }
#else
      static
      symbol_type
      make_LOR ()
      {
        return symbol_type (token::TOK_LOR);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_LEQ ()
      {
        return symbol_type (token::TOK_LEQ);
      }
#else
      static
      symbol_type
      make_LEQ ()
      {
        return symbol_type (token::TOK_LEQ);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_LNEQ ()
      {
        return symbol_type (token::TOK_LNEQ);
      }
#else
      static
      symbol_type
      make_LNEQ ()
      {
        return symbol_type (token::TOK_LNEQ);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_LTEQ ()
      {
        return symbol_type (token::TOK_LTEQ);
      }
#else
      static
      symbol_type
      make_LTEQ ()
      {
        return symbol_type (token::TOK_LTEQ);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_GTEQ ()
      {
        return symbol_type (token::TOK_GTEQ);
      }
#else
      static
      symbol_type
      make_GTEQ ()
      {
        return symbol_type (token::TOK_GTEQ);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_POW ()
      {
        return symbol_type (token::TOK_POW);
      }
#else
      static
      symbol_type
      make_POW ()
      {
        return symbol_type (token::TOK_POW);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_RETURNS ()
      {
        return symbol_type (token::TOK_RETURNS);
      }
#else
      static
      symbol_type
      make_RETURNS ()
      {
        return symbol_type (token::TOK_RETURNS);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_EXIT ()
      {
        return symbol_type (token::TOK_EXIT);
      }
#else
      static
      symbol_type
      make_EXIT ()
      {
        return symbol_type (token::TOK_EXIT);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_PRINT ()
      {
        return symbol_type (token::TOK_PRINT);
      }
#else
      static
      symbol_type
      make_PRINT ()
      {
        return symbol_type (token::TOK_PRINT);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_IF ()
      {
        return symbol_type (token::TOK_IF);
      }
#else
      static
      symbol_type
      make_IF ()
      {
        return symbol_type (token::TOK_IF);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_ELSE ()
      {
        return symbol_type (token::TOK_ELSE);
      }
#else
      static
      symbol_type
      make_ELSE ()
      {
        return symbol_type (token::TOK_ELSE);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_WHILE ()
      {
        return symbol_type (token::TOK_WHILE);
      }
#else
      static
      symbol_type
      make_WHILE ()
      {
        return symbol_type (token::TOK_WHILE);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_FOR ()
      {
        return symbol_type (token::TOK_FOR);
      }
#else
      static
      symbol_type
      make_FOR ()
      {
        return symbol_type (token::TOK_FOR);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_TRUE ()
      {
        return symbol_type (token::TOK_TRUE);
      }
#else
      static
      symbol_type
      make_TRUE ()
      {
        return symbol_type (token::TOK_TRUE);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_FALSE ()
      {
        return symbol_type (token::TOK_FALSE);
      }
#else
      static
      symbol_type
      make_FALSE ()
      {
        return symbol_type (token::TOK_FALSE);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_IMPORT ()
      {
        return symbol_type (token::TOK_IMPORT);
      }
#else
      static
      symbol_type
      make_IMPORT ()
      {
        return symbol_type (token::TOK_IMPORT);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_IRUN ()
      {
        return symbol_type (token::TOK_IRUN);
      }
#else
      static
      symbol_type
      make_IRUN ()
      {
        return symbol_type (token::TOK_IRUN);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_ISTART ()
      {
        return symbol_type (token::TOK_ISTART);
      }
#else
      static
      symbol_type
      make_ISTART ()
      {
        return symbol_type (token::TOK_ISTART);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_IROOT ()
      {
        return symbol_type (token::TOK_IROOT);
      }
#else
      static
      symbol_type
      make_IROOT ()
      {
        return symbol_type (token::TOK_IROOT);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_TYPE_INT ()
      {
        return symbol_type (token::TOK_TYPE_INT);
      }
#else
      static
      symbol_type
      make_TYPE_INT ()
      {
        return symbol_type (token::TOK_TYPE_INT);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_TYPE_FLOAT ()
      {
        return symbol_type (token::TOK_TYPE_FLOAT);
      }
#else
      static
      symbol_type
      make_TYPE_FLOAT ()
      {
        return symbol_type (token::TOK_TYPE_FLOAT);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_TYPE_STRING ()
      {
        return symbol_type (token::TOK_TYPE_STRING);
      }
#else
      static
      symbol_type
      make_TYPE_STRING ()
      {
        return symbol_type (token::TOK_TYPE_STRING);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_TYPE_NONE ()
      {
        return symbol_type (token::TOK_TYPE_NONE);
      }
#else
      static
      symbol_type
      make_TYPE_NONE ()
      {
        return symbol_type (token::TOK_TYPE_NONE);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_TYPE_TRUTH ()
      {
        return symbol_type (token::TOK_TYPE_TRUTH);
      }
#else
      static
      symbol_type
      make_TYPE_TRUTH ()
      {
        return symbol_type (token::TOK_TYPE_TRUTH);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_TYPE_LIST ()
      {
        return symbol_type (token::TOK_TYPE_LIST);
      }
#else
      static
      symbol_type
      make_TYPE_LIST ()
      {
        return symbol_type (token::TOK_TYPE_LIST);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_TYPE ()
      {
        return symbol_type (token::TOK_TYPE);
      }
#else
      static
      symbol_type
      make_TYPE ()
      {
        return symbol_type (token::TOK_TYPE);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_INT (int v)
      {
        return symbol_type (token::TOK_INT, std::move (v));
      }
#else
      static
      symbol_type
      make_INT (const int& v)
      {
        return symbol_type (token::TOK_INT, v);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_FLOAT (double v)
      {
        return symbol_type (token::TOK_FLOAT, std::move (v));
      }
#else
      static
      symbol_type
      make_FLOAT (const double& v)
      {
        return symbol_type (token::TOK_FLOAT, v);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_STRING (std::string v)
      {
        return symbol_type (token::TOK_STRING, std::move (v));
      }
#else
      static
      symbol_type
      make_STRING (const std::string& v)
      {
        return symbol_type (token::TOK_STRING, v);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_VAR (std::string v)
      {
        return symbol_type (token::TOK_VAR, std::move (v));
      }
#else
      static
      symbol_type
      make_VAR (const std::string& v)
      {
        return symbol_type (token::TOK_VAR, v);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_ADDEQ ()
      {
        return symbol_type (token::TOK_ADDEQ);
      }
#else
      static
      symbol_type
      make_ADDEQ ()
      {
        return symbol_type (token::TOK_ADDEQ);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_SUBEQ ()
      {
        return symbol_type (token::TOK_SUBEQ);
      }
#else
      static
      symbol_type
      make_SUBEQ ()
      {
        return symbol_type (token::TOK_SUBEQ);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_POWEQ ()
      {
        return symbol_type (token::TOK_POWEQ);
      }
#else
      static
      symbol_type
      make_POWEQ ()
      {
        return symbol_type (token::TOK_POWEQ);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_MULEQ ()
      {
        return symbol_type (token::TOK_MULEQ);
      }
#else
      static
      symbol_type
      make_MULEQ ()
      {
        return symbol_type (token::TOK_MULEQ);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_DIVEQ ()
      {
        return symbol_type (token::TOK_DIVEQ);
      }
#else
      static
      symbol_type
      make_DIVEQ ()
      {
        return symbol_type (token::TOK_DIVEQ);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_MODEQ ()
      {
        return symbol_type (token::TOK_MODEQ);
      }
#else
      static
      symbol_type
      make_MODEQ ()
      {
        return symbol_type (token::TOK_MODEQ);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_BANDEQ ()
      {
        return symbol_type (token::TOK_BANDEQ);
      }
#else
      static
      symbol_type
      make_BANDEQ ()
      {
        return symbol_type (token::TOK_BANDEQ);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_BOREQ ()
      {
        return symbol_type (token::TOK_BOREQ);
      }
#else
      static
      symbol_type
      make_BOREQ ()
      {
        return symbol_type (token::TOK_BOREQ);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_BXOREQ ()
      {
        return symbol_type (token::TOK_BXOREQ);
      }
#else
      static
      symbol_type
      make_BXOREQ ()
      {
        return symbol_type (token::TOK_BXOREQ);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_ADDADD ()
      {
        return symbol_type (token::TOK_ADDADD);
      }
#else
      static
      symbol_type
      make_ADDADD ()
      {
        return symbol_type (token::TOK_ADDADD);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_SUBSUB ()
      {
        return symbol_type (token::TOK_SUBSUB);
      }
#else
      static
      symbol_type
      make_SUBSUB ()
      {
        return symbol_type (token::TOK_SUBSUB);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_NEG ()
      {
        return symbol_type (token::TOK_NEG);
      }
#else
      static
      symbol_type
      make_NEG ()
      {
        return symbol_type (token::TOK_NEG);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_NOT ()
      {
        return symbol_type (token::TOK_NOT);
      }
#else
      static
      symbol_type
      make_NOT ()
      {
        return symbol_type (token::TOK_NOT);
      }
#endif
#if 201103L <= YY_CPLUSPLUS
      static
      symbol_type
      make_NO_ELSE ()
      {
        return symbol_type (token::TOK_NO_ELSE);
      }
#else
      static
      symbol_type
      make_NO_ELSE ()
      {
        return symbol_type (token::TOK_NO_ELSE);
      }
#endif


  private:
#if YY_CPLUSPLUS < 201103L
    /// Non copyable.
    parser (const parser&);
    /// Non copyable.
    parser& operator= (const parser&);
#endif


    /// Stored state numbers (used for stacks).
    typedef unsigned char state_type;

    /// Compute post-reduction state.
    /// \param yystate   the current state
    /// \param yysym     the nonterminal to push on the stack
    static state_type yy_lr_goto_state_ (state_type yystate, int yysym);

    /// Whether the given \c yypact_ value indicates a defaulted state.
    /// \param yyvalue   the value to check
    static bool yy_pact_value_is_default_ (int yyvalue);

    /// Whether the given \c yytable_ value indicates a syntax error.
    /// \param yyvalue   the value to check
    static bool yy_table_value_is_error_ (int yyvalue);

    static const signed char yypact_ninf_;
    static const signed char yytable_ninf_;

    /// Convert a scanner token kind \a t to a symbol kind.
    /// In theory \a t should be a token_kind_type, but character literals
    /// are valid, yet not members of the token_type enum.
    static symbol_kind_type yytranslate_ (int t);

#if YYDEBUG || 0
    /// For a symbol, its name in clear.
    static const char* const yytname_[];
#endif // #if YYDEBUG || 0


    // Tables.
    // YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
    // STATE-NUM.
    static const short yypact_[];

    // YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
    // Performed when YYTABLE does not specify something else to do.  Zero
    // means the default is an error.
    static const signed char yydefact_[];

    // YYPGOTO[NTERM-NUM].
    static const signed char yypgoto_[];

    // YYDEFGOTO[NTERM-NUM].
    static const signed char yydefgoto_[];

    // YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
    // positive, shift that token.  If negative, reduce the rule whose
    // number is the opposite.  If YYTABLE_NINF, syntax error.
    static const short yytable_[];

    static const short yycheck_[];

    // YYSTOS[STATE-NUM] -- The (internal number of the) accessing
    // symbol of state STATE-NUM.
    static const signed char yystos_[];

    // YYR1[YYN] -- Symbol number of symbol that rule YYN derives.
    static const signed char yyr1_[];

    // YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.
    static const signed char yyr2_[];


#if YYDEBUG
    // YYRLINE[YYN] -- Source line where rule number YYN was defined.
    static const short yyrline_[];
    /// Report on the debug stream that the rule \a r is going to be reduced.
    virtual void yy_reduce_print_ (int r) const;
    /// Print the state stack on the debug stream.
    virtual void yy_stack_print_ () const;

    /// Debugging level.
    int yydebug_;
    /// Debug stream.
    std::ostream* yycdebug_;

    /// \brief Display a symbol kind, value and location.
    /// \param yyo    The output stream.
    /// \param yysym  The symbol.
    template <typename Base>
    void yy_print_ (std::ostream& yyo, const basic_symbol<Base>& yysym) const;
#endif

    /// \brief Reclaim the memory associated to a symbol.
    /// \param yymsg     Why this token is reclaimed.
    ///                  If null, print nothing.
    /// \param yysym     The symbol.
    template <typename Base>
    void yy_destroy_ (const char* yymsg, basic_symbol<Base>& yysym) const;

  private:
    /// Type access provider for state based symbols.
    struct by_state
    {
      /// Default constructor.
      by_state () YY_NOEXCEPT;

      /// The symbol kind as needed by the constructor.
      typedef state_type kind_type;

      /// Constructor.
      by_state (kind_type s) YY_NOEXCEPT;

      /// Copy constructor.
      by_state (const by_state& that) YY_NOEXCEPT;

      /// Record that this symbol is empty.
      void clear () YY_NOEXCEPT;

      /// Steal the symbol kind from \a that.
      void move (by_state& that);

      /// The symbol kind (corresponding to \a state).
      /// \a symbol_kind::S_YYEMPTY when empty.
      symbol_kind_type kind () const YY_NOEXCEPT;

      /// The state number used to denote an empty symbol.
      /// We use the initial state, as it does not have a value.
      enum { empty_state = 0 };

      /// The state.
      /// \a empty when empty.
      state_type state;
    };

    /// "Internal" symbol: element of the stack.
    struct stack_symbol_type : basic_symbol<by_state>
    {
      /// Superclass.
      typedef basic_symbol<by_state> super_type;
      /// Construct an empty symbol.
      stack_symbol_type ();
      /// Move or copy construction.
      stack_symbol_type (YY_RVREF (stack_symbol_type) that);
      /// Steal the contents from \a sym to build this.
      stack_symbol_type (state_type s, YY_MOVE_REF (symbol_type) sym);
#if YY_CPLUSPLUS < 201103L
      /// Assignment, needed by push_back by some old implementations.
      /// Moves the contents of that.
      stack_symbol_type& operator= (stack_symbol_type& that);

      /// Assignment, needed by push_back by other implementations.
      /// Needed by some other old implementations.
      stack_symbol_type& operator= (const stack_symbol_type& that);
#endif
    };

    /// A stack with random access from its top.
    template <typename T, typename S = std::vector<T> >
    class stack
    {
    public:
      // Hide our reversed order.
      typedef typename S::iterator iterator;
      typedef typename S::const_iterator const_iterator;
      typedef typename S::size_type size_type;
      typedef typename std::ptrdiff_t index_type;

      stack (size_type n = 200)
        : seq_ (n)
      {}

#if 201103L <= YY_CPLUSPLUS
      /// Non copyable.
      stack (const stack&) = delete;
      /// Non copyable.
      stack& operator= (const stack&) = delete;
#endif

      /// Random access.
      ///
      /// Index 0 returns the topmost element.
      const T&
      operator[] (index_type i) const
      {
        return seq_[size_type (size () - 1 - i)];
      }

      /// Random access.
      ///
      /// Index 0 returns the topmost element.
      T&
      operator[] (index_type i)
      {
        return seq_[size_type (size () - 1 - i)];
      }

      /// Steal the contents of \a t.
      ///
      /// Close to move-semantics.
      void
      push (YY_MOVE_REF (T) t)
      {
        seq_.push_back (T ());
        operator[] (0).move (t);
      }

      /// Pop elements from the stack.
      void
      pop (std::ptrdiff_t n = 1) YY_NOEXCEPT
      {
        for (; 0 < n; --n)
          seq_.pop_back ();
      }

      /// Pop all elements from the stack.
      void
      clear () YY_NOEXCEPT
      {
        seq_.clear ();
      }

      /// Number of elements on the stack.
      index_type
      size () const YY_NOEXCEPT
      {
        return index_type (seq_.size ());
      }

      /// Iterator on top of the stack (going downwards).
      const_iterator
      begin () const YY_NOEXCEPT
      {
        return seq_.begin ();
      }

      /// Bottom of the stack.
      const_iterator
      end () const YY_NOEXCEPT
      {
        return seq_.end ();
      }

      /// Present a slice of the top of a stack.
      class slice
      {
      public:
        slice (const stack& stack, index_type range)
          : stack_ (stack)
          , range_ (range)
        {}

        const T&
        operator[] (index_type i) const
        {
          return stack_[range_ - i];
        }

      private:
        const stack& stack_;
        index_type range_;
      };

    private:
#if YY_CPLUSPLUS < 201103L
      /// Non copyable.
      stack (const stack&);
      /// Non copyable.
      stack& operator= (const stack&);
#endif
      /// The wrapped container.
      S seq_;
    };


    /// Stack type.
    typedef stack<stack_symbol_type> stack_type;

    /// The stack.
    stack_type yystack_;

    /// Push a new state on the stack.
    /// \param m    a debug message to display
    ///             if null, no trace is output.
    /// \param sym  the symbol
    /// \warning the contents of \a s.value is stolen.
    void yypush_ (const char* m, YY_MOVE_REF (stack_symbol_type) sym);

    /// Push a new look ahead token on the state on the stack.
    /// \param m    a debug message to display
    ///             if null, no trace is output.
    /// \param s    the state
    /// \param sym  the symbol (for its value and location).
    /// \warning the contents of \a sym.value is stolen.
    void yypush_ (const char* m, state_type s, YY_MOVE_REF (symbol_type) sym);

    /// Pop \a n symbols from the stack.
    void yypop_ (int n = 1);

    /// Constants.
    enum
    {
      yylast_ = 881,     ///< Last index in yytable_.
      yynnts_ = 14,  ///< Number of nonterminal symbols.
      yyfinal_ = 3 ///< Termination state number.
    };


    // User arguments.
    yy::Lexer &lexer;

  };

  inline
  parser::symbol_kind_type
  parser::yytranslate_ (int t)
  {
    // YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to
    // TOKEN-NUM as returned by yylex.
    static
    const signed char
    translate_table[] =
    {
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,    61,     2,     2,     2,    45,    38,     2,
      46,    47,    43,    41,    34,    42,     2,    44,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,    62,    63,
      36,    35,    37,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,    65,     2,    66,    40,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,    67,    39,    68,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    64
    };
    // Last valid token kind.
    const int code_max = 302;

    if (t <= 0)
      return symbol_kind::S_YYEOF;
    else if (t <= code_max)
      return YY_CAST (symbol_kind_type, translate_table[t]);
    else
      return symbol_kind::S_YYUNDEF;
  }

  // basic_symbol.
  template <typename Base>
  parser::basic_symbol<Base>::basic_symbol (const basic_symbol& that)
    : Base (that)
    , value ()
  {
    switch (this->kind ())
    {
      case symbol_kind::S_statement: // statement
      case symbol_kind::S_expression: // expression
      case symbol_kind::S_loop_statement: // loop_statement
        value.copy< AstNode* > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_function_expression: // function_expression
        value.copy< FunctionCallNode* > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_function_statement: // function_statement
        value.copy< FunctionNode* > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_if_statement: // if_statement
        value.copy< IfNode* > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_list_expression: // list_expression
        value.copy< ListNode* > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_block: // block
        value.copy< RootNode* > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_type_statement: // type_statement
        value.copy< Type > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_TRUTH: // TRUTH
        value.copy< bool > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_FLOAT: // FLOAT
        value.copy< double > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_INT: // INT
        value.copy< int > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_input_list: // input_list
        value.copy< std::list<std::tuple<std::string, Type>> > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_STRING: // STRING
      case symbol_kind::S_VAR: // VAR
        value.copy< std::string > (YY_MOVE (that.value));
        break;

      case symbol_kind::S_expression_list: // expression_list
        value.copy< std::vector<AstNode*> > (YY_MOVE (that.value));
        break;

      default:
        break;
    }

  }



  template <typename Base>
  parser::symbol_kind_type
  parser::basic_symbol<Base>::type_get () const YY_NOEXCEPT
  {
    return this->kind ();
  }

  template <typename Base>
  bool
  parser::basic_symbol<Base>::empty () const YY_NOEXCEPT
  {
    return this->kind () == symbol_kind::S_YYEMPTY;
  }

  template <typename Base>
  void
  parser::basic_symbol<Base>::move (basic_symbol& s)
  {
    super_type::move (s);
    switch (this->kind ())
    {
      case symbol_kind::S_statement: // statement
      case symbol_kind::S_expression: // expression
      case symbol_kind::S_loop_statement: // loop_statement
        value.move< AstNode* > (YY_MOVE (s.value));
        break;

      case symbol_kind::S_function_expression: // function_expression
        value.move< FunctionCallNode* > (YY_MOVE (s.value));
        break;

      case symbol_kind::S_function_statement: // function_statement
        value.move< FunctionNode* > (YY_MOVE (s.value));
        break;

      case symbol_kind::S_if_statement: // if_statement
        value.move< IfNode* > (YY_MOVE (s.value));
        break;

      case symbol_kind::S_list_expression: // list_expression
        value.move< ListNode* > (YY_MOVE (s.value));
        break;

      case symbol_kind::S_block: // block
        value.move< RootNode* > (YY_MOVE (s.value));
        break;

      case symbol_kind::S_type_statement: // type_statement
        value.move< Type > (YY_MOVE (s.value));
        break;

      case symbol_kind::S_TRUTH: // TRUTH
        value.move< bool > (YY_MOVE (s.value));
        break;

      case symbol_kind::S_FLOAT: // FLOAT
        value.move< double > (YY_MOVE (s.value));
        break;

      case symbol_kind::S_INT: // INT
        value.move< int > (YY_MOVE (s.value));
        break;

      case symbol_kind::S_input_list: // input_list
        value.move< std::list<std::tuple<std::string, Type>> > (YY_MOVE (s.value));
        break;

      case symbol_kind::S_STRING: // STRING
      case symbol_kind::S_VAR: // VAR
        value.move< std::string > (YY_MOVE (s.value));
        break;

      case symbol_kind::S_expression_list: // expression_list
        value.move< std::vector<AstNode*> > (YY_MOVE (s.value));
        break;

      default:
        break;
    }

  }

  // by_kind.
  inline
  parser::by_kind::by_kind ()
    : kind_ (symbol_kind::S_YYEMPTY)
  {}

#if 201103L <= YY_CPLUSPLUS
  inline
  parser::by_kind::by_kind (by_kind&& that)
    : kind_ (that.kind_)
  {
    that.clear ();
  }
#endif

  inline
  parser::by_kind::by_kind (const by_kind& that)
    : kind_ (that.kind_)
  {}

  inline
  parser::by_kind::by_kind (token_kind_type t)
    : kind_ (yytranslate_ (t))
  {}

  inline
  void
  parser::by_kind::clear ()
  {
    kind_ = symbol_kind::S_YYEMPTY;
  }

  inline
  void
  parser::by_kind::move (by_kind& that)
  {
    kind_ = that.kind_;
    that.clear ();
  }

  inline
  parser::symbol_kind_type
  parser::by_kind::kind () const YY_NOEXCEPT
  {
    return kind_;
  }

  inline
  parser::symbol_kind_type
  parser::by_kind::type_get () const YY_NOEXCEPT
  {
    return this->kind ();
  }

#line 11 "./src/parser.ypp"
} // yy
#line 2428 "./include/parser.yacc.h"




#endif // !YY_YY_INCLUDE_PARSER_YACC_H_INCLUDED
